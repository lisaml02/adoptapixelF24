setwd("~/Desktop/grad_school/fall_2024/data-793/AoP/data:eda")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
globe <- read_csv("../GLOBE_data.csv")
library(tidyverse)
library(dplyr)
globe <- read_csv("./GLOBE_data.csv")
View(globe)
problems(globe)
library(tidyverse)
library(dplyr)
globe <- read_csv("./GLOBE_data.csv")
lc <- read_csv("./GO_LandCover.csv")
View(globe)
View(lc)
globe <- globe %>%
rename(landcover_id = `land covers:land cover id`) %>%
rename(data_source = `land covers:data source`) %>%
rename(measured_at = `land covers:measured at`) %>%
rename(muc_code = `land covers:muc code`) %>%
rename(muc_description = `land covers:muc description`) %>%
rename(north_photo_url = `land covers:north photo url`) %>%
rename(east_photo_url = `land covers:east photo url`) %>%
rename(south_photo_url = `land covers:south photo url`) %>%
rename(west_photo_url = `land covers:west photo url`) %>%
rename(upward_photo_url = `land covers:upward photo url`) %>%
rename(downward_photo_url = `land covers:downward photo url`) %>%
rename(measure_lat = `land covers:measurement latitude`) %>%
rename(measure_long = `land covers:measurement longitude`) %>%
rename(measure_elev = `land covers:measurement elevation`) %>%
rename(loc_method = `land covers:location method`) %>%
rename(loc_accuracy = `land covers:location accuracy (m)`)
globe %>%
select(organization_id, org_name, site_id, site_name, latitude, longitude, elevation, measured_on, landcover_id, data_source, measured_at, muc_code, muc_description, north_photo_url, east_photo_url, south_photo_url, west_photo_url, upward_photo_url, downward_photo_url, measure_lat, measure_long, measure_elev, loc_method, loc_accuracy) %>%
filter(na.omit(globe))
globe %>%
select(organization_id, org_name, site_id, site_name, latitude, longitude, elevation, measured_on, landcover_id, data_source, measured_at, muc_code, muc_description, north_photo_url, east_photo_url, south_photo_url, west_photo_url, upward_photo_url, downward_photo_url, measure_lat, measure_long, measure_elev, loc_method, loc_accuracy) %>%
filter(if_all(everything(), ~ !is.na(.))
globe %>%
select(organization_id, org_name, site_id, site_name, latitude, longitude, elevation, measured_on, landcover_id, data_source, measured_at, muc_code, muc_description, north_photo_url, east_photo_url, south_photo_url, west_photo_url, upward_photo_url, downward_photo_url, measure_lat, measure_long, measure_elev, loc_method, loc_accuracy) %>%
filter(if_all(everything(), ~ !is.na(.)))
globe_c <- globe %>%
select(organization_id, org_name, site_id, site_name, latitude, longitude, elevation, measured_on, landcover_id, data_source, measured_at, muc_code, muc_description, north_photo_url, east_photo_url, south_photo_url, west_photo_url, upward_photo_url, downward_photo_url, measure_lat, measure_long, measure_elev, loc_method, loc_accuracy) %>%
filter(if_all(everything(), ~ !is.na(.)))
globe_c
View(lc)
setwd("~/Desktop/grad_school/fall_2024/data-793/AoP/data:eda")
library(tidyverse)
library(dplyr)
globe <- read_csv("./GLOBE_data.csv")
library(tidyverse)
library(dplyr)
globe <- read_csv("./GLOBE_data.csv")
globe <- globe %>%
rename(landcover_id = `land covers:land cover id`) %>%
rename(data_source = `land covers:data source`) %>%
rename(measured_at = `land covers:measured at`) %>%
rename(muc_code = `land covers:muc code`) %>%
rename(muc_description = `land covers:muc description`) %>%
rename(north_photo_url = `land covers:north photo url`) %>%
rename(east_photo_url = `land covers:east photo url`) %>%
rename(south_photo_url = `land covers:south photo url`) %>%
rename(west_photo_url = `land covers:west photo url`) %>%
rename(upward_photo_url = `land covers:upward photo url`) %>%
rename(downward_photo_url = `land covers:downward photo url`) %>%
rename(measure_lat = `land covers:measurement latitude`) %>%
rename(measure_long = `land covers:measurement longitude`) %>%
rename(measure_elev = `land covers:measurement elevation`) %>%
rename(loc_method = `land covers:location method`) %>%
rename(loc_accuracy = `land covers:location accuracy (m)`)
globe_c <- globe %>%
select(organization_id, org_name, site_id, site_name, latitude, longitude, elevation, measured_on, landcover_id, data_source, measured_at, muc_code, muc_description, north_photo_url, east_photo_url, south_photo_url, west_photo_url, upward_photo_url, downward_photo_url, measure_lat, measure_long, measure_elev, loc_method, loc_accuracy) %>%
filter(if_all(everything(), ~ !is.na(.)))
globe_c
View(globe)
write_csv(globe_c, globe_c)
write_csv(globe_c, "globe_c")
write_csv(globe_c, "globe_c.csv")
install.packages("cld2")
library(cld2)
# Check languages in the text_column of globe_c
language_counts <- table(cld2::detect_language(globe_c$text_column, plain_text = TRUE))
View(globe_c)
install.packages("cld2")
library(cld2)
# Check languages in the text_column of globe_c
language_counts <- table(cld2::detect_language(globe_c$org_name, plain_text = TRUE))
# Display the language counts
print(language_counts)
# install.packages("cld2")
library(cld2)
# Check languages in the text_column of globe_c
language_counts <- table(cld2::detect_language(globe_c$org_name, plain_text = TRUE))
# Display the language counts
print(language_counts)
# Check for non-English characters in the text_column of globe_c
non_english_entries <- grepl("[^A-Za-z0-9[:space:][:punct:]]", globe_c$org_name)
# Display rows containing non-English characters
non_english_data <- globe_c[non_english_entries, ]
print(non_english_data)
# install.packages("cld2")
library(cld2)
# Check languages in the text_column of globe_c
language_counts <- table(cld2::detect_language(globe_c$org_name, plain_text = TRUE))
# Display the language counts
print(language_counts)
library(cld2)
# Identify rows with non-English characters
non_english_entries <- grepl("[^A-Za-z0-9[:space:][:punct:]]", globe_c$org_name)
# Extract the rows containing non-English characters
non_english_data <- globe_c[non_english_entries, ]
# Detect languages in these rows
detected_languages <- cld2::detect_language(non_english_data$org_name, plain_text = TRUE)
# Display the detected languages
table(detected_languages)
# install.packages("cld2")
library(cld2)
# Check languages in the text_column of globe_c
language_counts <- table(cld2::detect_language(globe_c$org_name, plain_text = TRUE))
# Display the language counts
print(language_counts)
min(globe_c$measured_at)
max(globe_c$measured_at)
